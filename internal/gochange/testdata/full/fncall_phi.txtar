-- file.go --
package p

type Iface interface{ Meth() }
type A struct{}

func (A) Meth() {}

func do(a *A) {
	var fn func(*A)
	if true {
		fn = func(*A) {}
	} else {
		fn = func(*A) {}
	}
	fn(a)
}

func do2(a A) {
	var fn func(A)
	if true {
		fn = func(A) {}
	} else {
		fn = func(A) {}
	}
	fn(a)
}

func do3(a A) { // want `a could be Iface`
	var fn func(Iface)
	if true {
		fn = func(Iface) {}
	} else {
		fn = func(Iface) {}
	}
	fn(a)
}
func do4(a *A) { // want `a could be Iface`
	var fn func(Iface)
	if true {
		fn = func(Iface) {}
	} else {
		fn = func(Iface) {}
	}
	fn(a)
}

func do5(a Iface) {
	var fn func(Iface)
	if true {
		fn = func(Iface) {}
	} else {
		fn = func(Iface) {}
	}
	fn(a)
}

func test() {
	do(&A{})
	do2(A{})
	do3(A{})
	do4(&A{})
	do5(&A{})
	do5(A{})
}
-- file.go.golden --
package p

type Iface interface{ Meth() }
type A struct{}

func (A) Meth() {}

func do(a *A) {
	var fn func(*A)
	if true {
		fn = func(*A) {}
	} else {
		fn = func(*A) {}
	}
	fn(a)
}

func do2(a A) {
	var fn func(A)
	if true {
		fn = func(A) {}
	} else {
		fn = func(A) {}
	}
	fn(a)
}

func do3(a Iface) { // want `a could be Iface`
	var fn func(Iface)
	if true {
		fn = func(Iface) {}
	} else {
		fn = func(Iface) {}
	}
	fn(a)
}
func do4(a Iface) { // want `a could be Iface`
	var fn func(Iface)
	if true {
		fn = func(Iface) {}
	} else {
		fn = func(Iface) {}
	}
	fn(a)
}

func do5(a Iface) {
	var fn func(Iface)
	if true {
		fn = func(Iface) {}
	} else {
		fn = func(Iface) {}
	}
	fn(a)
}

func test() {
	do(&A{})
	do2(A{})
	do3(A{})
	do4(&A{})
	do5(&A{})
	do5(A{})
}
