-- file.go --
package p

type Iface interface{ Meth() }
type A struct{}

func (A) Meth() {}

func do(a A) {
	as := make([]A, 1)
	as[0] = a
}

func do2(a A) { // want `a could be Iface`
	as := make([]Iface, 1)
	as[0] = a
}

func do3(a Iface) {
	as := make([]Iface, 1)
	as[0] = a
}

func use() {
	do(A{})
	do2(A{})
	do3(A{})
}

func do4(a A, i int) {
	as := make([]A, i)
	as[0] = a
}

func do5(a A, i int) { // want `a could be Iface`
	as := make([]Iface, i)
	as[0] = a
}

func do6(a Iface, i int) {
	as := make([]Iface, i)
	as[0] = a
}
-- file.go.golden --
package p

type Iface interface{ Meth() }
type A struct{}

func (A) Meth() {}

func do(a A) {
	as := make([]A, 1)
	as[0] = a
}

func do2(a Iface) { // want `a could be Iface`
	as := make([]Iface, 1)
	as[0] = a
}

func do3(a Iface) {
	as := make([]Iface, 1)
	as[0] = a
}

func use() {
	do(A{})
	do2(A{})
	do3(A{})
}

func do4(a A, i int) {
	as := make([]A, i)
	as[0] = a
}

func do5(a Iface, i int) { // want `a could be Iface`
	as := make([]Iface, i)
	as[0] = a
}

func do6(a Iface, i int) {
	as := make([]Iface, i)
	as[0] = a
}
